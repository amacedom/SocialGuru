/* Copyright (C) 2017 SocialGuru S.de R.L. - All Rights Reserved */ 

-- SOCIALGURU DATABASE SCHEMA

/* List of possible types of accounts: 
 * Normal 
 * Promoter
 * Venue
 * Artist */
CREATE TABLE IF NOT EXISTS ACCOUNT_TYPES (
	TYPE 		CHAR NOT NULL PRIMARY KEY,
	TYPE_NAME 	VARCHAR(10) NOT NULL,
	DESCRIPTION VARCHAR(100) NOT NULL,
	CONSTRAINT CHECK_TYPE CHECK(TYPE='N' OR TYPE='P' OR TYPE='A' OR TYPE='V'));

/* List of possible status of an account: 
 * Active
 * Down
 * Pending
 * Cancelled */
CREATE TABLE IF NOT EXISTS ACCOUNT_STATUS (
	STATUS 		CHAR NOT NULL PRIMARY KEY,
	STATUS_NAME	VARCHAR(10) NOT NULL,
	DESCRIPTION	VARCHAR(100) NOT NULL,
	CONSTRAINT CHECK_STATUS CHECK(STATUS='A' OR STATUS='D' OR STATUS='P' OR STATUS='C'));

/* List of possible types of transactions:
 * Transfering money to another account (concept of paying for a service) 'T'
 * Payment for data plan (account to socialguru) 'D'
 * Returning a coupon (digital money) to a customer from socialguru 'C'
 * Returning money to customer (due to a failure in the system) 'R'
 * Payment for branding (customer to socialguru) 'B' */
CREATE TABLE IF NOT EXISTS TRANSACTION_TYPES (
	TYPE		CHAR NOT NULL PRIMARY KEY,
	TYPE_NAME	VARCHAR(10) NOT NULL,
	DESCRIPTION	VARCHAR(50) NOT NULL,
	CONSTRAINT CHECK_TYPE CHECK(TYPE='T' OR TYPE='D' OR TYPE='C' OR TYPE='R' OR TYPE='B'));

/* List of possible types of notifications:
 * Opportunity (when artist is available)
 * Promote your venue or service
 * Feedback socialguru */
 CREATE TABLE IF NOT EXISTS	NOTIFICATION_TYPES (
	TYPE		CHAR NOT NULL PRIMARY KEY,
	TYPE_NAME	VARCHAR(10) NOT NULL,
	DESCRIPTION	VARCHAR(50) NOT NULL,
	CONSTRAINT CHECK_TYPE CHECK(TYPE='O' OR TYPE='P' OR TYPE='F'));

/* This table stores the information about each user 
 registered in the app */
CREATE TABLE IF NOT EXISTS USERS ( 
	USER_ID 		INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	FIRST_NAME 		VARCHAR(30) NOT NULL,
	LAST_NAME 		VARCHAR(30),
	ADDR1			VARCHAR(50),
	ADDR2			VARCHAR(50),
	ZIPCODE			INT(5),
	COUNTRY			VARCHAR(15) NOT NULL,
	MEMBER_SINCE 	DATE NOT NULL)
	AUTO_INCREMENT = 1;

/* The table accounts represent the official information of the customer
 * Important info such as the password, email, etc will be stored here. */
CREATE TABLE IF NOT EXISTS ACCOUNTS (
	ACCOUNT_ID		INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	USER_ID			INT NOT NULL,
	ACCOUNT_TYPE 	CHAR NOT NULL,
	ACCOUNT_STATUS	CHAR NOT NULL,
	PHONE_NUMBER	VARCHAR(15),
	COMPANY_NAME	VARCHAR(30),
	USERNAME		VARCHAR(12),
	EMAIL			VARCHAR(30),
	PASSWORD		VARCHAR(15),
	CURRENT_BALANCE	FLOAT(10,2) NOT NULL DEFAULT '0.00',
	PREV_BALANCE	FLOAT(10,2) NOT NULL DEFAULT '0.00',
	DATE_CREATED	TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	LAST_CHECKOUT	TIMESTAMP,
	LAST_SIGN_IN	TIMESTAMP,
	FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID),
	FOREIGN KEY(ACCOUNT_TYPE) REFERENCES ACCOUNT_TYPES(TYPE),
	FOREIGN KEY(ACCOUNT_STATUS) REFERENCES ACCOUNT_STATUS(STATUS))
	AUTO_INCREMENT = 1;
    
/* We must have a table where we can query
   all the available genres */
CREATE TABLE IF NOT EXISTS GENRES (
	GENRE_ID 	INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    GENRE		VARCHAR(25))
    AUTO_INCREMENT = 1;

/* We have different commision rates depending on the price 
   set by the artist or venue owner. */
CREATE TABLE IF NOT EXISTS COMMISSION_FEES (
	COMMISSION_ID	INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	NAME			VARCHAR(15) NOT NULL,
	DESCRIPTION 	VARCHAR(50) NOT NULL,
	PERCENTAGE		FLOAT(3,2) NOT NULL) 
	AUTO_INCREMENT = 1;
    
/* Each artist must have the ability to set their own 
   requirements, and also post their services information
   within the application */
CREATE TABLE IF NOT EXISTS ARTISTS (
	ARTIST_ID 			INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	ACCOUNT_ID			INT NOT NULL,
	HOMETOWN			VARCHAR(60),
    GENRE_ID			INT NOT NULL,
    MEMBERS				VARCHAR(200),
    ABOUT				VARCHAR(300),
    EXTRA_HOUR			FLOAT(10,2),
    REGULAR_DAY			FLOAT(10,2),
    SPECIAL_DAY			FLOAT(10,2),
    SERVICE_DURATION	INT NOT NULL,
    AWARDS				VARCHAR(200),
    CURRENT_LOCATION	VARCHAR(30),
    BIOGRAPHY			VARCHAR(300),
    RANKING				FLOAT(2,1),
	ADVANCE				FLOAT(5,2),
    COMMISSION_ID		INT NOT NULL,
    FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNTS(ACCOUNT_ID),
    FOREIGN KEY(GENRE_ID) REFERENCES GENRES(GENRE_ID),
    FOREIGN KEY(COMMISSION_ID) REFERENCES COMMISSION_FEES(COMMISSION_ID))
    AUTO_INCREMENT = 1;

/* An account can have multiple transactions, and there can be 
 * several types of transactions. */
CREATE TABLE IF NOT EXISTS TRANSACTIONS (
	TXN_ID		INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	ACCOUNT_ID	INT NOT NULL,
	TXN_TYPE	CHAR NOT NULL,
	AMOUNT		FLOAT(10,2) NOT NULL,
	DESCRIPTION VARCHAR(50) NOT NULL,
	TXN_TT		TIMESTAMP NOT NULL,
	FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNTS(ACCOUNT_ID),
	FOREIGN KEY(TXN_TYPE) REFERENCES TRANSACTION_TYPES(TYPE))
	AUTO_INCREMENT = 1;

/* Multiple photos can be related to one single account */
CREATE TABLE IF NOT EXISTS PHOTOS (
	PHOTO_ID 	INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    ACCOUNT_ID	INT NOT NULL,
    DESCRIPTION	VARCHAR(100),
    IMAGE 		LONGBLOB,
    FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNTS(ACCOUNT_ID))
    AUTO_INCREMENT = 1;
    
/* We need to have a functionality where each user can review
   each other.*/
CREATE TABLE IF NOT EXISTS REVIEWS (
	REVIEW_ID			INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    ACCOUNT_ID_CRITIC	INT NOT NULL,
    ACCOUNT_ID			INT NOT NULL,
    COMMENTS			VARCHAR(200),
    STARS				FLOAT(2,1),
    FOREIGN KEY(ACCOUNT_ID_CRITIC) REFERENCES ACCOUNTS(ACCOUNT_ID),
    FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNTS(ACCOUNT_ID),
    CONSTRAINT CHECK_STARS CHECK(STARS <= 5 AND STARS >= 1),
    CONSTRAINT CHECK_DIFF CHECK(ACCOUNT_ID_CRITIC != ACCOUNT_ID))
    AUTO_INCREMENT = 1;
    
/* These are the data suites that we will offer to the promoters */
 /*
CREATE TABLE DATA_SUITES (
	SUITE_ID 		CHAR NOT NULL PRIMARY KEY,
	SUITE_NAME		VARCHAR(15) NOT NULL,
	ARTISTS			VARCHAR(30) NOT NULL,
	DATA_HISTORY	VARCHAR(30) NOT NULL,
	DEVICES			INT(2) NOT NULL,
	SUPPORT			VARCHAR(30) NOT NULL,
	DESCRIPTION		VARCHAR(50) NOT NULL,
	PRICE			FLOAT(10,2) NOT NULL)
	AUTO_INCREMENT = 1;
*/

/* These branding plans are offered to the artists,
   venue owners or promotores that want to promote their accounts*/
CREATE TABLE IF NOT EXISTS BRANDING_PLANS (
	PLAN_ID			INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	PLAN_NAME 		VARCHAR(15) NOT NULL,
	DESCRIPTION		VARCHAR(50) NOT NULL,
	PRICE			FLOAT(10,2) NOT NULL)
	AUTO_INCREMENT = 1;

/* We need to have different notifications depending on what 
   we want to let our customers know */
CREATE TABLE IF NOT EXISTS NOTIFICATIONS (
	NOTIFICATION_ID		INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	ACCOUNT_ID			INT NOT NULL,
	NOTIFICATION_TYPE	CHAR NOT NULL,
	NOTIFICATION_TT		TIMESTAMP NOT NULL,
	DATE_SENT			DATE NOT NULL,
	DESCRIPTION VARCHAR(50) NOT NULL,
	FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNTS(ACCOUNT_ID),
	FOREIGN KEY(NOTIFICATION_TYPE) REFERENCES NOTIFICATION_TYPES(TYPE))
	AUTO_INCREMENT = 1;

/* This table is not supported at the moment, 
CREATE TABLE VENUES (
	VENUE_ID		INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	ACCOUNT_ID		INT NOT NULL,
	NAME 			VARCHAR(20) NOT NULL,
	ADDR1			VARCHAR(30) NOT NULL,
	ADDR2 			VARCHAR(30),
	ZIPCODE			INT(5) NOT NULL,
	CITY			VARCHAR(10) NOT NULL,
	STATE			VARCHAR(10) NOT NULL,
	PHONE_NUMBER	VARCHAR(15),
	MIN_CAPACITY	INT NOT NULL,
	MAX_CAPACITY	INT NOT NULL,
	FOREIGN KEY(ACCOUNT_ID) REFERENCES ACCOUNTS(ACCOUNT_ID),
	CONSTRAINT CHECK_CAPACITY CHECK(MAX_CAPACITY > MIN_CAPACITY))
	AUTO_INCREMENT = 1;
/*
CREATE TABLE VENUE_REVIEWS (
	VENU 
	)*/

